========== How Ruby Works ===========

self - gives you access to the current object
caller - object that calls the method
local variables - keys are names, values are objects, included in the binding

some_object.class - returns the class of the object the method is being called on
some_object.methods - returns the methods the object has access to
some_object.instance_variables - returns the objects instance variables; stored in the object
some_object.instance_variable_set("@variable_name", "value") - creates and sets an instance variable to the passed in key/value for the object its being called upon
some_object.instance_variable_get("@variable_name") - gets the passed in instance variable's value

SomeClass.constants - returns the constant variable of the class in which the constants method is called upon
SomeClass.instance_methods(false) - returns instance methods of the class which called the method. Omits parent(super) methods
SomeClass.superclass - returns the parent class of the class calling the superclass method

some_object.method(:method_name).owner - returns the class that owns the method
some_object.method(:method_name).source_location - returns the location of the method

============= General ================

How many types of variables are there? 3, @instance_variables, ConstantsVaraibles and local_variables
What is the difference between a local variable and an instance variable? - local variables are visible within methods and instance variables have a class wide scope
If I have no local variables, what must abc be? - a method
What is puts? - puts is a method called on the object $stdout
What is `gets?" - gets is a method called on the object $stdin
What is require? - allows a class to have access to other class methods that aren't defined within the given class

============ Local Variables ==============
If you have a local variable named abc and an argument named abc, which one will you get when you ask for abc - local variable
When do local variables "die"? (as in they go away) - they go away as soon as you are outside of the method

=========== Variables and Methods ===============

What is puts? - puts is a method called upon $stdout that prints something to the screen, file, etc...
What kind of variable must arguments be? - arguments are local variables but are set to instance variables

============ Method invocation ============

What object are methods looked up on? - methods are looked up in the calling object's class. If not there, they search through the super classes to see if they are defined anywhere
If I call a method and don't say what object I'm calling it on, what object is it probably called on? - self
When you call a method, can it see the local variables of another method? - no
When you invoke a method, where does Ruby go to look for that method? - the current class
If Ruby can't find the method there, where will it look next? - the class's superclass
If Ruby can't find the method there, either, where will it look next? - the superclass's superclass
Will Ruby stop looking for the method? If So:
When? - when it's reaches the top class, class nil or when it finds the correct method definition
Why? - it will stop looking when all superclass method hashes have been searched and the method is no found or when the method is found
What will it do at this point? - it will either return nil and cause an error or execute the method when found
If String is an object, what do we know about it? - String has it's own methods and it always inherits all Object methods and Object superclass methods
Where are the String class's methods stored? - in a hash within the String class
Where is the new method defined? - within an objects class or class Object
What is the first method that Ruby calls on an object? - .new
What other methods are defined where new is defined? What do they do? - all object methods. They can perform methods on any instance of the Object method
What is the algorithm for method lookup? - search for the method in the calling object's class. If not found search it's superclass. Continue until method is found or returns nil

=============== Constants ==============

Where are constants stored? - in a hash in the class
What constant holds the String class? (you can ask a class what constants it has with the .constants method) - :String constant
What constant holds the Object class? - :Object constant
When do constants "die"? (as in they go away) - constants do not die
Can you reassign a constant? - no
Can you change the value of a constant? - no
What happens when Ruby can't find the constant? - it will go to the superclass's constants and if it can't find it up the line, it will return nil

========== Instance Variables ===========

If you have two cars, one is a Camry, the other an F150, what instance variables exist? What are their values? Where do they exist? - 2 instance variables exist. 1 for each object. Values are 'Camry' and 'F150'. Each instance variable will be inside the object that it is assigned.
What object are instance variables stored on? - each object has its own instance variables
How do you find methods that can operate on an instance variable? - all methods for the object and the objects superclasses can operate on its instance variables
Which objects can a method operate on? - objects that the method is defined in and its child objects
When do instance variables "die"? (as in they go away) - they will "die" when the individual object "dies"
If you access an instance variable without defining it, what will it return? - self
What does attr_reader do? - defines a reader method.
What does attr_writer do? - defines a writer method. Sets the value of an instance variable
What does attr_accessor do? - combination of attr_reader and attr_writer
Why does colour = "blue" not invoke the colour= method? - colour is used as a local variable in this situation
How many arguments does the color= method take? - ??

What is the point of an object? (Why does Ruby even bother with them?) - you can have multiple instances of a class with different instance variables. This allows you to make different instances of a certain class's object.
If you didn't have an object, how could you write the same code? - a class is an object so you could manipulate the class to become an object. All methods that an object can use, a class can also
